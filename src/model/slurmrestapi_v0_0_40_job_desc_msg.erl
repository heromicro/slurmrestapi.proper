-module(slurmrestapi_v0_0_40_job_desc_msg).

-include("slurmrestapi.hrl").

-export([slurmrestapi_v0_0_40_job_desc_msg/0]).

-export([slurmrestapi_v0_0_40_job_desc_msg/1]).

-export_type([slurmrestapi_v0_0_40_job_desc_msg/0]).

-type slurmrestapi_v0_0_40_job_desc_msg() ::
  [ {'account', binary() }
  | {'account_gather_frequency', binary() }
  | {'admin_comment', binary() }
  | {'allocation_node_list', binary() }
  | {'allocation_node_port', integer() }
  | {'argv', list(binary()) }
  | {'array', binary() }
  | {'batch_features', binary() }
  | {'begin_time', slurmrestapi_v0_0_40_uint64_no_val:slurmrestapi_v0_0_40_uint64_no_val() }
  | {'flags', list(binary()) }
  | {'burst_buffer', binary() }
  | {'clusters', binary() }
  | {'cluster_constraint', binary() }
  | {'comment', binary() }
  | {'contiguous', boolean() }
  | {'container', binary() }
  | {'container_id', binary() }
  | {'cores_per_socket', integer() }
  | {'core_specification', integer() }
  | {'thread_specification', integer() }
  | {'cpu_binding', binary() }
  | {'cpu_binding_flags', list(binary()) }
  | {'cpu_frequency', binary() }
  | {'cpus_per_tres', binary() }
  | {'crontab', slurmrestapi_v0_0_40_cron_entry:slurmrestapi_v0_0_40_cron_entry() }
  | {'deadline', integer() }
  | {'delay_boot', integer() }
  | {'dependency', binary() }
  | {'end_time', integer() }
  | {'environment', list(binary()) }
  | {'rlimits', slurmrestapi_v0_0_40_job_desc_msg_rlimits:slurmrestapi_v0_0_40_job_desc_msg_rlimits() }
  | {'excluded_nodes', list(binary()) }
  | {'extra', binary() }
  | {'constraints', binary() }
  | {'group_id', binary() }
  | {'hetjob_group', integer() }
  | {'immediate', boolean() }
  | {'job_id', integer() }
  | {'kill_on_node_fail', boolean() }
  | {'licenses', binary() }
  | {'mail_type', list(binary()) }
  | {'mail_user', binary() }
  | {'mcs_label', binary() }
  | {'memory_binding', binary() }
  | {'memory_binding_type', list(binary()) }
  | {'memory_per_tres', binary() }
  | {'name', binary() }
  | {'network', binary() }
  | {'nice', integer() }
  | {'tasks', integer() }
  | {'open_mode', list(binary()) }
  | {'reserve_ports', integer() }
  | {'overcommit', boolean() }
  | {'partition', binary() }
  | {'distribution_plane_size', integer() }
  | {'power_flags', list(slurmrestapi_any_type:slurmrestapi_any_type()) }
  | {'prefer', binary() }
  | {'hold', boolean() }
  | {'priority', slurmrestapi_v0_0_40_uint32_no_val:slurmrestapi_v0_0_40_uint32_no_val() }
  | {'profile', list(binary()) }
  | {'qos', binary() }
  | {'reboot', boolean() }
  | {'required_nodes', list(binary()) }
  | {'requeue', boolean() }
  | {'reservation', binary() }
  | {'script', binary() }
  | {'shared', list(binary()) }
  | {'exclusive', list(binary()) }
  | {'oversubscribe', boolean() }
  | {'site_factor', integer() }
  | {'spank_environment', list(binary()) }
  | {'distribution', binary() }
  | {'time_limit', slurmrestapi_v0_0_40_uint32_no_val:slurmrestapi_v0_0_40_uint32_no_val() }
  | {'time_minimum', slurmrestapi_v0_0_40_uint32_no_val:slurmrestapi_v0_0_40_uint32_no_val() }
  | {'tres_bind', binary() }
  | {'tres_freq', binary() }
  | {'tres_per_job', binary() }
  | {'tres_per_node', binary() }
  | {'tres_per_socket', binary() }
  | {'tres_per_task', binary() }
  | {'user_id', binary() }
  | {'wait_all_nodes', boolean() }
  | {'kill_warning_flags', list(binary()) }
  | {'kill_warning_signal', binary() }
  | {'kill_warning_delay', slurmrestapi_v0_0_40_uint16_no_val:slurmrestapi_v0_0_40_uint16_no_val() }
  | {'current_working_directory', binary() }
  | {'cpus_per_task', integer() }
  | {'minimum_cpus', integer() }
  | {'maximum_cpus', integer() }
  | {'nodes', binary() }
  | {'minimum_nodes', integer() }
  | {'maximum_nodes', integer() }
  | {'minimum_boards_per_node', integer() }
  | {'minimum_sockets_per_board', integer() }
  | {'sockets_per_node', integer() }
  | {'threads_per_core', integer() }
  | {'tasks_per_node', integer() }
  | {'tasks_per_socket', integer() }
  | {'tasks_per_core', integer() }
  | {'tasks_per_board', integer() }
  | {'ntasks_per_tres', integer() }
  | {'minimum_cpus_per_node', integer() }
  | {'memory_per_cpu', slurmrestapi_v0_0_40_uint64_no_val:slurmrestapi_v0_0_40_uint64_no_val() }
  | {'memory_per_node', slurmrestapi_v0_0_40_uint64_no_val:slurmrestapi_v0_0_40_uint64_no_val() }
  | {'temporary_disk_per_node', integer() }
  | {'selinux_context', binary() }
  | {'required_switches', slurmrestapi_v0_0_40_uint32_no_val:slurmrestapi_v0_0_40_uint32_no_val() }
  | {'standard_error', binary() }
  | {'standard_input', binary() }
  | {'standard_output', binary() }
  | {'wait_for_switch', integer() }
  | {'wckey', binary() }
  | {'x11', list(binary()) }
  | {'x11_magic_cookie', binary() }
  | {'x11_target_host', binary() }
  | {'x11_target_port', integer() }
  ].


slurmrestapi_v0_0_40_job_desc_msg() ->
    slurmrestapi_v0_0_40_job_desc_msg([]).

slurmrestapi_v0_0_40_job_desc_msg(Fields) ->
  Default = [ {'account', binary() }
            , {'account_gather_frequency', binary() }
            , {'admin_comment', binary() }
            , {'allocation_node_list', binary() }
            , {'allocation_node_port', integer() }
            , {'argv', list(binary()) }
            , {'array', binary() }
            , {'batch_features', binary() }
            , {'begin_time', slurmrestapi_v0_0_40_uint64_no_val:slurmrestapi_v0_0_40_uint64_no_val() }
            , {'flags', list(binary()) }
            , {'burst_buffer', binary() }
            , {'clusters', binary() }
            , {'cluster_constraint', binary() }
            , {'comment', binary() }
            , {'contiguous', boolean() }
            , {'container', binary() }
            , {'container_id', binary() }
            , {'cores_per_socket', integer() }
            , {'core_specification', integer() }
            , {'thread_specification', integer() }
            , {'cpu_binding', binary() }
            , {'cpu_binding_flags', list(binary()) }
            , {'cpu_frequency', binary() }
            , {'cpus_per_tres', binary() }
            , {'crontab', slurmrestapi_v0_0_40_cron_entry:slurmrestapi_v0_0_40_cron_entry() }
            , {'deadline', integer() }
            , {'delay_boot', integer() }
            , {'dependency', binary() }
            , {'end_time', integer() }
            , {'environment', list(binary()) }
            , {'rlimits', slurmrestapi_v0_0_40_job_desc_msg_rlimits:slurmrestapi_v0_0_40_job_desc_msg_rlimits() }
            , {'excluded_nodes', list(binary()) }
            , {'extra', binary() }
            , {'constraints', binary() }
            , {'group_id', binary() }
            , {'hetjob_group', integer() }
            , {'immediate', boolean() }
            , {'job_id', integer() }
            , {'kill_on_node_fail', boolean() }
            , {'licenses', binary() }
            , {'mail_type', list(binary()) }
            , {'mail_user', binary() }
            , {'mcs_label', binary() }
            , {'memory_binding', binary() }
            , {'memory_binding_type', list(binary()) }
            , {'memory_per_tres', binary() }
            , {'name', binary() }
            , {'network', binary() }
            , {'nice', integer() }
            , {'tasks', integer() }
            , {'open_mode', list(binary()) }
            , {'reserve_ports', integer() }
            , {'overcommit', boolean() }
            , {'partition', binary() }
            , {'distribution_plane_size', integer() }
            , {'power_flags', list(slurmrestapi_any_type:slurmrestapi_any_type()) }
            , {'prefer', binary() }
            , {'hold', boolean() }
            , {'priority', slurmrestapi_v0_0_40_uint32_no_val:slurmrestapi_v0_0_40_uint32_no_val() }
            , {'profile', list(binary()) }
            , {'qos', binary() }
            , {'reboot', boolean() }
            , {'required_nodes', list(binary()) }
            , {'requeue', boolean() }
            , {'reservation', binary() }
            , {'script', binary() }
            , {'shared', list(binary()) }
            , {'exclusive', list(binary()) }
            , {'oversubscribe', boolean() }
            , {'site_factor', integer() }
            , {'spank_environment', list(binary()) }
            , {'distribution', binary() }
            , {'time_limit', slurmrestapi_v0_0_40_uint32_no_val:slurmrestapi_v0_0_40_uint32_no_val() }
            , {'time_minimum', slurmrestapi_v0_0_40_uint32_no_val:slurmrestapi_v0_0_40_uint32_no_val() }
            , {'tres_bind', binary() }
            , {'tres_freq', binary() }
            , {'tres_per_job', binary() }
            , {'tres_per_node', binary() }
            , {'tres_per_socket', binary() }
            , {'tres_per_task', binary() }
            , {'user_id', binary() }
            , {'wait_all_nodes', boolean() }
            , {'kill_warning_flags', list(binary()) }
            , {'kill_warning_signal', binary() }
            , {'kill_warning_delay', slurmrestapi_v0_0_40_uint16_no_val:slurmrestapi_v0_0_40_uint16_no_val() }
            , {'current_working_directory', binary() }
            , {'cpus_per_task', integer() }
            , {'minimum_cpus', integer() }
            , {'maximum_cpus', integer() }
            , {'nodes', binary() }
            , {'minimum_nodes', integer() }
            , {'maximum_nodes', integer() }
            , {'minimum_boards_per_node', integer() }
            , {'minimum_sockets_per_board', integer() }
            , {'sockets_per_node', integer() }
            , {'threads_per_core', integer() }
            , {'tasks_per_node', integer() }
            , {'tasks_per_socket', integer() }
            , {'tasks_per_core', integer() }
            , {'tasks_per_board', integer() }
            , {'ntasks_per_tres', integer() }
            , {'minimum_cpus_per_node', integer() }
            , {'memory_per_cpu', slurmrestapi_v0_0_40_uint64_no_val:slurmrestapi_v0_0_40_uint64_no_val() }
            , {'memory_per_node', slurmrestapi_v0_0_40_uint64_no_val:slurmrestapi_v0_0_40_uint64_no_val() }
            , {'temporary_disk_per_node', integer() }
            , {'selinux_context', binary() }
            , {'required_switches', slurmrestapi_v0_0_40_uint32_no_val:slurmrestapi_v0_0_40_uint32_no_val() }
            , {'standard_error', binary() }
            , {'standard_input', binary() }
            , {'standard_output', binary() }
            , {'wait_for_switch', integer() }
            , {'wckey', binary() }
            , {'x11', list(binary()) }
            , {'x11_magic_cookie', binary() }
            , {'x11_target_host', binary() }
            , {'x11_target_port', integer() }
            ],
  lists:ukeymerge(1, lists:sort(Fields), lists:sort(Default)).

